---
breadcrumb: PCF Services
title: Installing the Service Broker
---

This topic describes how to install the Service Broker for AWS by configuring your AWS account and importing the product file into Ops Manager.

##Installation Prerequisites

* Pivotal Cloud Foundry&reg; version 1.7 or later.
* An Amazon Web Services (AWS) account.
* An available PostgreSQL database

##<a id="setup"></a>Step 1: Set up AWS

Complete the following steps PRIOR to installing the Service Broker for AWS. 
These steps configure your AWS account to allow the Service Broker for AWS to create and manage AWS resources:


1. Create a new IAM user for the PCF cluster in the AWS IAM console. If you have more than one PCF deployment, you must create an IAM user for each one. Write down the AWS Access Key ID and Secret Access Key for each of your PCF IAM accounts, you will need it later. For each IAM user, click on the user name, then the Permissions tab and "Attach Policy" then select these policies to be added: IAMFullAccess, AmazonRDSFullAccess, AmazonS3FullAccess. Click "Attach Policy" and check that the user has those policies listed. 

1. This database must be created BEFORE installing the Service Broker for AWS.  In the AWS RDS console, create an RDS PostgreSQL database for production purposes, with the smallest DB instance class (db.t2.micro), Multi-AZ, SSD Storage and 5GB of Allocated Storage. Use `pcf-aws-services` for the DB Instance Identifier. The Service Broker for AWS stores configuration information in this database. Note the Database IP, Database Port, Admin user, Admin password and Database Name.

1. To access the RDS database from an external IP address, modify your AWS VPC settings to allow the appropriate ports to be accessed. For more information, see the [Accessing a DB Instance in a VPC](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Scenarios.html) topic in the AWS documentation.

###<a id="security-groups"></a>Step 1a: Configure Security Groups
To use the Service Broker, you will need to ensure your Application Security Group allows TCP traffic to RDS databases. In addition to allowing the default traffic, you should also [add rules to enable inbound and outbound TCP traffic](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html#adding-security-group-rule) on the following ports : `5432, 1521, 1433, 3306`


##<a id="install"></a>Step 2: Install in Ops Manager

To install the Service Broker for AWS tile in Ops Manager, complete the following steps:

1. Download the Service Broker for AWS product file from [Pivotal Network](https://network.pivotal.io/products/p-aws-services).

1. From the Ops Manager Installation Dashboard, click **Import a Product** to upload the product file.

1. Click **Add** next to the uploaded product description in the **Available Products** view to add this product to your staging area.

1. Click on the newly added tile to configure the sections as described below.

###<a id="aws-config"></a>AWS Config
The setup in Step 1 must be successfully completed before beginning this configuration. You will need the AWS and database parameters from that step to successfully configure the broker. 

1. Click **AWS Config**.
    <%= image_tag("images/aws-sb-awsconfig.png") %>
1. Enter the **AWS Access Key ID** and the **Secret Access Key** from [Step 1](#setup).
2. For **Default Region**, enter the AWS region to use as the default. You can change this later for a particular service. 
3. For **Default Availability Zone**, enter the AWS Availability Zone to use as the default. This default Availability Zone will only be used where Multi-AZ is not selected.
4. The broker automatically creates AWS tags for the service plan GUID and the org-space GUID. You can also configure default tags to add for each AWS resource by entering them in the **Default Tags** text box, separated by a space. For example, `owner=operations env=production app=payroll`.
1. Click **Save**.

###<a id="broker-config"></a>Broker Config
1. Click **Broker Config**.
    <%= image_tag("images/aws-sb-brokerconfig.png") %>
1. For **App Instances**, enter the number of instances of the service broker you want to run. The default is `2`.
1. For **Database Host**, enter the IP address of the PostgreSQL database where the Service Broker for AWS will store configuration information. You can use the database you created in the AWS RDS console in [Step 1](#setup), or choose to use an existing internal database.
1. For **Database Port**, enter the port number of your database. The default for PostgreSQL is 5432.
1. For **Database Username** and **Database Password**, enter your database credentials.
1. For **Database Name**, enter the name of the database where the Service Broker for AWS can store configuration information.
1. Under **Database SSL Connection**, select **Enabled** if you want to encrypt traffic to your database and add your custom root certificate in the **Root Certificate** text box. Otherwise, select **Disabled**. 
1. Click **Save**.

Note: in the following sections that configure AWS Services, if you don't want to offer that specific service in your PCF Marketplace then simply uncheck the box **Enable in Marketplace**


###<a id="dynamodb-config"></a>DynamoDB Config
1. Click **DynamoDB Config**.
    <%= image_tag("images/aws-sb-dynamodbconfig.png") %>

1. Under **Override Default AWS Region** select the default AWS region.  



###<a id="rds-config"></a>RDS Config
1. Click **RDS Config**.
    <%= image_tag("images/aws-sb-rdsconfig.png") %>

1. Under **Override Default AWS Region** select the default AWS region.  

1. Under **Override Default AWS Availability Zone** select the default Availability Zone for RDS database instances.
2. The setting **Enable Storage Encryption** is off by default. You can enable RDS encryption for a database instance. However, not all regions and DB instance classes support encryption so if you enable this option, you will need to change the default plans to remove those that don't support encryption. More information is available [here.](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html#d0e21710)

2. Select the checkboxes to enable the RDS Services that you want to show in Marketplace

1. Under **Plans**, for each RDS Database, the Service Broker for AWS includes several default plans for use. 
    * **basic**: For small projects and during development.
    * **standard**: For a small production database (multi-AZ, 2vCPU, 7.5GB).
    * **premium**: For a mid-sized database (multi-AZ, 4 vCPU, 15GB).
    * **enterprise**: For a large database (multi-AZ, 8 vCPU, 32GB).

1. You can view and edit the configuration of existing plans by clicking the arrow next to their names. 
    <%= image_tag("images/aws-sb-editplan.png") %>
    <p class="note"><strong>Note</strong>: If you edit an existing service plan, only future instances of that services plan will be changed. Ask your Admin to modify existing instances.</p> 
1. You can also create a new custom plan by clicking the **Add** button and completing the following fields:
    - **Plan Name**: The name of the plan in the Services Marketplace.
    - **Plan Description**: The description of the plan in the Services Marketplace. 
    - **Plan Features**: The list of features displayed in Apps Manager.
    - **Engine**: This must be `postgres` or 'mysql'.
    - **Engine Version**: The version that your database uses.
    - **DB Instance Class**: The hardware that runs the database.
    - **Allocated Storage (GB)**: The amount of storage allocated to the database.
    - **Storage Type**: This can be Magnetic, SSD or Provisioned IOPS (`io1`).
    - **IOPS**: The IOPS rate for the database instance. Only required if your **Storage Type** is `io1`.
    - **Backup Retention Period**: How long to retain backups (typically 7 days).
    - **Copy Tags to Snapshot**: Whether to tag the database snapshots.
    - **Multi AZ**: Whether to automatically run in multiple Availability Zones.

    <%= image_tag("images/aws-sb-addplan.png") %>

1. Click **Save**.

###<a id="s3-config"></a>S3 Config
1. Click **S3 Config**.
    <%= image_tag("images/aws-sb-s3config.png") %>
1. Under **Override Default AWS Region**, select the default AWS region for this service.
1. Select **Enable in Marketplace** to enable the S3 service in the Services Marketplace.
2. Enter the bucket prefix, a short name to prefix all bucket names.
1. Click **Installation Dashboard** to return to the Ops Manager Installation Dashboard.
1. Click **Apply Changes** to install the product.


###<a id="sqs-config"></a>SQS Config
1. Click **SQS Config**.
    <%= image_tag("images/aws-sb-sqsconfig.png") %>
1. Under **Override Default AWS Region**, select the default AWS region for this service.
2.  For **Queue Prefix**, enter the queue name prefix that will be used for filtering list results.
3.  For **Default Visibility Timeout**, enter the length of time during which the queue will be unavailable once a message is delivered from the queue.
4.  For **Message Retention Period**, enter the number of seconds Amazon SQS retains a message.
5.  For **Max Message Size**, enter the limit of how many bytes a message can contain before Amazon SQS rejects it.
6.  For **Delivery Delay**, enter the time in seconds that the delivery of all messages in the queue will be delayed.
7.  For **Rx Message Wait Time**, enter the duration, in seconds, that the reciever action waits until a message is in the queue.
8.  The **Redrive Policy** specifies an existing dead letter queue to receive messages after the source queue fails to process a message a specified number of times.  If enabled, this policy includes the following properties:
    - **Dead Letter Queue**: The Amazon Resource Name (ARN) of the dead letter queue.
    - **Max Recieves**: The maximum number of times a message is delivered to the source queue before being sent to the dead letter queue.
1. Select **Enable in Marketplace** to enable the SQS service in the Services Marketplace.
1. Click **Installation Dashboard** to return to the Ops Manager Installation Dashboard.
1. Click **Apply Changes** to install the product.

More information on AWS SQS queue properties is available [here](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html). For more information on SQS Redrive Policy, refer to the documentation on [Using Amazon SQS Dead Letter Queues](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/SQSDeadLetterQueue.html)

##<a id="confirm"></a>Step 3: Confirm Installation

<p class="note"><strong>Note</strong>: The Service Broker for AWS installs an app called <code>aws-services-broker</code> in the <code>iaas-brokers</code> space of the <code>system</code> org.</p> 

1. After Ops Manager finishes the installation, the **Service Broker for AWS** appears as a green tile in the **Installation Dashboard**.

    <%= image_tag("images/aws-sb-install.png") %>
1. In Apps Manager, all orgs and spaces show the new services in the Services Marketplace. Users can create instances of these services through Apps Manager or via the cf CLI. Review the [Creating and Managing Service Instances](creating.html) topic for more information.

    <%= image_tag("images/aws-sb-marketplace.png") %>


